{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n\nconst WORDPRESS_HOST = 'https://UCCryptoSocDao.org.nz'\n\nconst rewrites = new Map([\n    ['/mission', false],\n])\n\nexport async function middleware(request: NextRequest) {\n    const path = request.nextUrl.pathname\n\n    if (rewrites.has(path) && rewrites.get(path) === true) {\n        const originalResponse = await fetch(`${WORDPRESS_HOST}${path}`)\n\n        const contentType = originalResponse.headers.get('content-type')\n        if (contentType && contentType.includes('text/html')) {\n            const originalBody = await originalResponse.text()\n\n            const replaceUrls = (body: string) => {\n                return body\n                    .replace(/((href|src)=[\"'])https?:\\/\\/cryptocurrency\\.org\\.nz(\\/[^\"']*)?(['\"])/g, (match, p1, _, p3, p4) => {\n                        // Remove trailing slash and normalize the path\n                        const urlPath = (p3 || '').replace(/\\/+$/, '')\n                        const fullPath = urlPath.startsWith('/') ? urlPath : `/${urlPath}`\n\n                        if (rewrites.has(fullPath) || fullPath === '') {\n                            return `${p1}${fullPath}${p4}`\n                        }\n\n                        // Return original match for other URLs (css, js, media)\n                        return match\n                    })\n                    .replace(/href=\"https:\\/\\/cryptocurrency\\.org\\.nz(\\/)?\"/g, 'href=\"/\"')\n            }\n            const transformedBody = replaceUrls(originalBody)\n\n            return new NextResponse(transformedBody, {\n                status: originalResponse.status,\n                headers: {\n                    'Content-Type': 'text/html',\n                    ...Object.fromEntries(Array.from(originalResponse.headers.entries()).filter(([key]) => ['content-type', 'etag', 'cache-control'].includes(key.toLowerCase())))\n                }\n            })\n        }\n\n        return NextResponse.rewrite(new URL(`${WORDPRESS_HOST}${path}`, request.url))\n    }\n\n    return NextResponse.next()\n}\n\nexport const config = {\n    matcher: ['/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)']\n}\n"],"names":[],"mappings":";;;;AAAA;AAAA;;AAGA,MAAM,iBAAiB;AAEvB,MAAM,WAAW,IAAI,IAAI;IACrB;QAAC;QAAY;KAAM;CACtB;AAEM,eAAe,WAAW,OAAoB;IACjD,MAAM,OAAO,QAAQ,OAAO,CAAC,QAAQ;IAErC,IAAI,SAAS,GAAG,CAAC,SAAS,SAAS,GAAG,CAAC,UAAU,MAAM;QACnD,MAAM,mBAAmB,MAAM,MAAM,GAAG,iBAAiB,MAAM;QAE/D,MAAM,cAAc,iBAAiB,OAAO,CAAC,GAAG,CAAC;QACjD,IAAI,eAAe,YAAY,QAAQ,CAAC,cAAc;YAClD,MAAM,eAAe,MAAM,iBAAiB,IAAI;YAEhD,MAAM,cAAc,CAAC;gBACjB,OAAO,KACF,OAAO,CAAC,yEAAyE,CAAC,OAAO,IAAI,GAAG,IAAI;oBACjG,+CAA+C;oBAC/C,MAAM,UAAU,CAAC,MAAM,EAAE,EAAE,OAAO,CAAC,QAAQ;oBAC3C,MAAM,WAAW,QAAQ,UAAU,CAAC,OAAO,UAAU,CAAC,CAAC,EAAE,SAAS;oBAElE,IAAI,SAAS,GAAG,CAAC,aAAa,aAAa,IAAI;wBAC3C,OAAO,GAAG,KAAK,WAAW,IAAI;oBAClC;oBAEA,wDAAwD;oBACxD,OAAO;gBACX,GACC,OAAO,CAAC,kDAAkD;YACnE;YACA,MAAM,kBAAkB,YAAY;YAEpC,OAAO,IAAI,6LAAA,CAAA,eAAY,CAAC,iBAAiB;gBACrC,QAAQ,iBAAiB,MAAM;gBAC/B,SAAS;oBACL,gBAAgB;oBAChB,GAAG,OAAO,WAAW,CAAC,MAAM,IAAI,CAAC,iBAAiB,OAAO,CAAC,OAAO,IAAI,MAAM,CAAC,CAAC,CAAC,IAAI,GAAK;4BAAC;4BAAgB;4BAAQ;yBAAgB,CAAC,QAAQ,CAAC,IAAI,WAAW,KAAK;gBAClK;YACJ;QACJ;QAEA,OAAO,6LAAA,CAAA,eAAY,CAAC,OAAO,CAAC,IAAI,IAAI,GAAG,iBAAiB,MAAM,EAAE,QAAQ,GAAG;IAC/E;IAEA,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;AAC5B;AAEO,MAAM,SAAS;IAClB,SAAS;QAAC;KAA2E;AACzF"}}]
}